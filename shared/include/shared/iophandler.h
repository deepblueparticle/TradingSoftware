#ifndef IOPHANDLER_H
#define IOPHANDLER_H

#include "commands.h"
#include "common.h"

namespace Algo {

/*! \class    IOpHandler
 *  \brief    Interface class handling operations with market
 *
 */
class IOpHandler
{
public:
    virtual ~IOpHandler() {}

    /*!
     * \brief Create bracket order and send it to the market
     *
     * \param symbol Symbol
     * \param primaryEntryPrice Primary Order Limit price
     * \param secondaryLimitPrice Secondary Order limit price
     * \param secondaryStopPrice Secondary Order stop price
     * \param secondaryStopLimitPrice Secondary Order stop limit price
     * \param pointC Point C
     * \param quantity Quantity
     * \param mode Order mode buy or sell
     * \param trailing Trailing stop tick amount. Actual trailing is 
                       trailing * tickSize for IB
     * \param tickSize tick size
     * \param strategyId Strategy Id
     * \param [out] firstLegClOrderId Output of the generated order id for
     *                                Primary Order
     * \param [out] secondLegStopClOrderId Output of the generated order id for
     *                                     Secondary Stop Order
     * \param [out] secondLegLimitClOrderId Output of the generated orderid for
     *                                      Secondary Limit Order
     * \param internalId Internal id of order generated by backend
     * \param algoType Type of algorithm \see Algo::AlgoType
     * \param isIAC Set true if order Immediate-or_cancel
     * \param upname Upload file name with strategies
     * \param unique Unique id generated by GUI for every strategy loaded at GUI
     */
    virtual bool sendBracketOrder(const std::string& symbol,
                                  double primaryEntryPrice,
                                  double secondaryLimitPrice,
                                  double secondaryStopPrice,
                                  double secondaryStopLimitPrice,
                                  double pointC,
                                  int quantity,
                                  OrderMode side,
                                  double trailing,
                                  UNSIGNED_LONG strategyId,
                                  std::string & firstLegClOrderId,
                                  std::string & secondLegLimitClOrderId,
                                  std::string & secondLegStopClOrderId,
                                  long internalId,
                                  AlgoType algoType,
                                  bool isIAC,
                                  const std::string& upname,
                                  const std::string& unique) = 0;

    /*!
     * \brief Modify existing order new price and quantity
     *
     * \param originalOrderId Id of order to be replaced
     * \param [out] newOrderId Will be assigned to new order id that replaces
     *                         original order
     * \param price New price
     * \param qty New quantity
     * \param price New price
     * \param internalId Internal identifier that will be used in generation of
     *                   the new order id
     */
    virtual bool modifyOrder(const std::string& originalOrderId,
                             std::string& newOrderId,
                             double price,
                             double qty,
                             long internalId) = 0;


    /*!
     * \brief It checks if connection is still alive or not
     */
    virtual bool isConnected() = 0;

    /*!
    * \brief return       the price for the SecondaryLimit order when performing t-exit
    * \param marketPrice  the market price
    * \param tickSize     positive tick size if it's buy strategy, 
    *                     negative tick size if it's sell strategy
    */
    virtual double modifiedSecondaryLimitPrice(double marketPrice, double tickSize) = 0;

    inline void setBuyAccount(std::string account) {_accountBuy = account;}
    inline void setSellAccount(std::string account) { _accountBuy = account; }

protected:
    static std::string           _accountBuy;
    static std::string           _accountSell;
};

}

#endif // IOPHANDLER_H
